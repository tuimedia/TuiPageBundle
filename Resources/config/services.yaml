# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
          $componentSchemas: '%tui_page.schemas%'
          $pageClass: '%tui_page.page_class%'
          $pageDataClass: '%tui_page.page_data_class%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    Tui\PageBundle\:
        resource: '../../*'
        exclude: '../../{DependencyInjection,Entity,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    Tui\PageBundle\Controller\:
        resource: '../../Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    voku\helper\AntiXSS:
        class: voku\helper\AntiXSS
        calls:
            - [ 'removeEvilHtmlTags', [['iframe']]]
